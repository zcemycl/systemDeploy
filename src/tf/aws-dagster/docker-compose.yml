version: "3.11"
x-dagster-common: &dagster_common
  build:
    context: .
    dockerfile: Dockerfile.dagster
  environment:
    DAGSTER_POSTGRES_USER: ${POSTGRES_USER}
    DAGSTER_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    DAGSTER_POSTGRES_DB: ${POSTGRES_DB}
    DAGSTER_POSTGRES_PORT: ${POSTGRES_PORT}
    DAGSTER_POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
    ETL1_CODE_SERVER_HOST: ${ETL1_CODE_SERVER_HOST}
    ETL1_CODE_SERVER_PORT: ${ETL1_CODE_SERVER_PORT}
    ETL1_CODE_LOC_NAME: ${ETL1_CODE_LOC_NAME}
    ETL2_CODE_SERVER_HOST: ${ETL2_CODE_SERVER_HOST}
    ETL2_CODE_SERVER_PORT: ${ETL2_CODE_SERVER_PORT}
    ETL2_CODE_LOC_NAME: ${ETL2_CODE_LOC_NAME}
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
  networks:
    - net
  depends_on:
    - dagster-db
    - dagster-user-code-etl1
    - dagster-user-code-etl2
    - dagster-s3
x-dagster-code-common: &dagster_code_common
  build:
    context: .
    dockerfile: codelocations/Dockerfile.user_code
    args:
      MODULE_NAME: etl1
      PORT: 4000
  container_name: dagster_user_code_etl1
  image: ${DAGSTER_CURRENT_IMAGE}
  environment:
    DAGSTER_POSTGRES_USER: ${POSTGRES_USER}
    DAGSTER_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    DAGSTER_POSTGRES_DB: ${POSTGRES_DB}
    DAGSTER_CURRENT_IMAGE: ${DAGSTER_CURRENT_IMAGE}
  restart: always
  networks:
    - net
  depends_on:
    dagster-db:
      condition: service_started
    dagster-s3:
      condition: service_started
    dagster-s3-populate:
      condition: service_started
networks:
  net:
    driver: bridge
    name: dagster_net
services:
  dagster-db:
    build:
      context: .
      dockerfile: Dockerfile.pgvector
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DATABASE=postgres
      # - PGDATA=/var/lib/postgresql/data/
    # volumes:
    #   - "./src/sql/init.sql:/docker-entrypoint-initdb.d/"
    ports:
      - "5455:5432"
    networks:
      - net
  dagster-s3:
    restart: always
    image: minio/minio
    container_name: minio
    volumes:
      - ./minio_data:/data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: "minioadmin"
      MINIO_ROOT_PASSWORD: "minioadmin"
      MINIO_ADDRESS: ":9000"
      MINIO_PORT: "9000"
      MINIO_STORAGE_USE_HTTPS: False
      MINIO_CONSOLE_ADDRESS: ":9001"
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://dagster-s3:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - net
  dagster-s3-populate:
    image: minio/mc
    depends_on:
      dagster-s3:
        condition: service_started
    restart: on-failure
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://dagster-s3:9000 minioadmin minioadmin;
      /usr/bin/mc mb minio/my-bucket;
      "
    networks:
      - net
  dagster-user-code-etl1:
    <<: *dagster_code_common
    volumes:
      - ./codelocations/etl1/etl1:/opt/dagster/app/etl1
    command: dagster code-server start -h 0.0.0.0 -p 4000 -m etl1
  dagster-user-code-etl2:
    <<: *dagster_code_common
    build:
      context: .
      dockerfile: codelocations/Dockerfile.user_code
      args:
        MODULE_NAME: etl2
        PORT: 4001
    container_name: dagster_user_code_etl2
    image: dagster_user_code_etl2
    environment:
      DAGSTER_POSTGRES_USER: ${POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${POSTGRES_DB}
      DAGSTER_CURRENT_IMAGE: dagster_user_code_etl2
    volumes:
      - ./codelocations/etl2/etl2:/opt/dagster/app/etl2
    command: dagster code-server start -h 0.0.0.0 -p 4001 -m etl2
  webserver:
    <<: *dagster_common
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    expose:
      - 3000
    ports:
      - 3000:3000

  daemon:
    <<: *dagster_common
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
